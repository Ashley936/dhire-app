// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  wallet           String             @unique
  type             Role
  name             String
  username         String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserProfile      UserProfile[]
  RecruiterProfile RecruiterProfile[]
  JobPost          JobPost[]
}

model UserProfile {
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String           @id @map("_id") @db.ObjectId
  bio        String?
  image      String?
  skills     Skill[]
  location   String?
  website    String?
  experience ExperienceType[]
  education  EducationType[]
  projects   ProjectType[]
  social     SocialType?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model RecruiterProfile {
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String      @id @map("_id") @db.ObjectId
  bio       String?
  image     String?
  company   String?
  location  String?
  website   String?
  social    SocialType?
  jobPosts  JobPost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Company {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  website         String?
  logo            String?
  description     String?
  size            Int?
  type            String?
  industry        String?
  founded         DateTime?
  specializations String[]
  benefits        String[]
  location        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  jobPosts        JobPost[]
}

model JobPost {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  title                  String
  description            String
  location               String
  from                   DateTime
  to                     DateTime
  company                Company           @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId              String            @map("companyId") @db.ObjectId
  minSalary                 Int
  maxSalary                 Int
  jobLevel               SkillLevel
  jobType                JobType[]
  salaryType             SalaryType
  skills                 Skill[]
  applicants             String[]          @default([])
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  RecruiterProfile       RecruiterProfile? @relation(fields: [recruiterProfileUserId], references: [userId])
  recruiterProfileUserId String?           @db.ObjectId
  User                   User?             @relation(fields: [userId], references: [id])
  userId                 String?           @db.ObjectId
}

enum Role {
  RECRUITER
  APPLICANT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum JobType {
  FULLTIME 
  PARTTIME
  INTERNSHIP
  REMOTE
  FREELANCE
}
type Skill {
  name  String
  level SkillLevel
}

type ExperienceType {
  company     String?
  designation String?
  from        DateTime?
  to          DateTime?
  current     Boolean?
  location    String?
  description String?
}

type EducationType {
  school       String?
  degree       String?
  fieldOfStudy String?
  from         DateTime?
  to           DateTime?
  current      Boolean?
  location     String?
  description  String?
}

type ProjectType {
  title       String?
  link        String?
  from        DateTime?
  to          DateTime?
  current     Boolean?
  description String?
}

type SocialType {
  youtube   String?
  twitter   String?
  facebook  String?
  linkedin  String?
  instagram String?
  github    String?
}

enum Currency {
  USD
  INR
  SOL
  USDC
}

enum SalaryType {
  CRYPTO
  FIAT
}
